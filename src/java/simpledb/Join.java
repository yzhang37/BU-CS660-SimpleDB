package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
    private enum Status {
        NOT_STARTED, READING, EOF
    }
    private static final long serialVersionUID = 1L;

    private final JoinPredicate joinPred;
    private final DbIterator child1, child2;
    // mergedTD stores the TupleDesc of merged data type.
    private final TupleDesc mergedTD;
    private final int outerTupleSize, innerTupleSize;
    private Tuple outerTuple;
    private Status c1status = Status.NOT_STARTED,
            c2status = Status.NOT_STARTED;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.joinPred = p;
        this.child1 = child1;
        this.child2 = child2;
        this.outerTupleSize = child1.getTupleDesc().numFields();
        this.innerTupleSize = child2.getTupleDesc().numFields();
        this.mergedTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(this.joinPred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(this.joinPred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return this.mergedTD;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        super.open();
        this.c2status = Status.NOT_STARTED;
        this.c1status = Status.NOT_STARTED;
    }

    public void close() {
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // here we simply use Simple Nested Loop Algorithm
        // this can be very slow and needs mountains of IOs.
        // but here we just to pass the test first.
        Tuple innerTuple = null;
        while (true) {
            switch (this.c1status) {
                case NOT_STARTED:
                    // not started yet, we must first read tuple in child1
                    if (this.child1.hasNext()) {
                        this.outerTuple = this.child1.next();
                        this.c1status = Status.READING;
                    } else {
                        return null;
                    }
                    break;
                case READING:
                    // already on going, we check if child2 reach the EOF.
                    if (this.c2status == Status.EOF) {
                        if (this.child1.hasNext()) {
                            // reach the end, then we reset child2.
                            this.outerTuple = this.child1.next();
                            this.child2.rewind();
                            this.c2status = Status.NOT_STARTED;
                        } else {
                            // both child1 and child2 reach the end. we will end the loop
                            this.c1status = Status.EOF;
                            return null;
                        }
                        // have a retry
                        continue;
                    }
                    break;
                case EOF:
                    return null;
            }
            switch (this.c2status) {
                case NOT_STARTED:
                    if (this.child2.hasNext()) {
                        innerTuple = this.child2.next();
                        this.c2status = Status.READING;
                    } else {
                        return null;
                    }
                    break;
                case READING:
                    if (this.child2.hasNext()) {
                        innerTuple = this.child2.next();
                    } else {
                        this.c2status = Status.EOF;
                        continue;
                    }
                    break;
                case EOF:
                    continue;
            }
            if (this.joinPred.filter(this.outerTuple, innerTuple)) {
                Tuple mergedTuple = new Tuple(this.mergedTD);
                for (int i = 0; i < this.outerTupleSize; ++i) {
                    mergedTuple.setField(i, outerTuple.getField(i));
                }
                for (int i = 0; i < this.innerTupleSize; ++i) {
                    mergedTuple.setField(i + this.outerTupleSize, innerTuple.getField(i));
                }
                return mergedTuple;
            }
        }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }

}
